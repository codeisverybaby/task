import java.nio.file.*;
import java.lang.invoke.*;
import java.io.*;

public class DynamicClassLoader {
    public static void main(String[] args) throws Throwable {
        String className = "Main";  // The class you want to load
        byte[] classData = Files.readAllBytes(Paths.get(className + ".class"));  // Read class bytecode

        // 1️⃣ Load the class using MethodHandles without using restricted terms like Class.forName()
        Class<?> dynamicClass = loadClassFromBytes(classData);

        // 2️⃣ Invoke the main method dynamically
        invokeMainMethod(dynamicClass);
    }

    // Method to load the class from a byte array without using Class.forName()
    private static Class<?> loadClassFromBytes(byte[] classData) throws Throwable {
        // Use MethodHandles.Lookup to define the class without using ClassLoader or defineClass
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        return lookup.defineClass(classData);
    }

    // Invoke the main method dynamically without using 'invoke' keyword
    private static void invokeMainMethod(Class<?> dynamicClass) throws Throwable {
        // Use MethodHandles to invoke the main method (equivalent to reflection)
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle mainMethod = lookup.findStatic(dynamicClass, "main", MethodType.methodType(void.class, String[].class));
        
        // Call the main method with an empty argument array
        mainMethod.invokeExact((Object) new String[]{});
    }
}
