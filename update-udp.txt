use tokio::net::UdpSocket;
use tokio::task;
use socket2::{Socket, Domain, Type};
use std::sync::Arc;
use tokio::time::{sleep, Duration};

#[tokio::main]
async fn main() -> std::io::Result<()> {
    // T·∫°o socket UDP
    let socket = UdpSocket::bind("0.0.0.0:8080").await?;

    // TƒÉng buffer UDP ƒë·ªÉ nh·∫≠n nhi·ªÅu packet h∆°n
    let raw_socket = Socket::from(socket);
    raw_socket.set_recv_buffer_size(4 * 1024 * 1024)?; // 4MB Buffer

    // Chia s·∫ª socket gi·ªØa nhi·ªÅu lu·ªìng
    let socket = Arc::new(UdpSocket::from_std(raw_socket.into())?);

    println!("üöÄ UDP Server running on 0.0.0.0:8080...");

    // S·ªë l∆∞·ª£ng worker nh·∫≠n d·ªØ li·ªáu
    let workers = 4;
    let mut handles = vec![];

    // Worker nh·∫≠n d·ªØ li·ªáu
    for _ in 0..workers {
        let socket = Arc::clone(&socket);
        let handle = task::spawn(async move {
            let mut buf = [0u8; 65536];

            loop {
                match socket.recv_from(&mut buf).await {
                    Ok((len, addr)) => {
                        println!("üì© Received {} bytes from {}", len, addr);
                    }
                    Err(e) => {
                        eprintln!("‚ùå Error receiving data: {}", e);
                    }
                }
            }
        });

        handles.push(handle);
    }

    // üî• Th√™m m·ªôt worker ƒë·ªÉ g·ª≠i d·ªØ li·ªáu ƒë·ªãnh k·ª≥
    let socket_send = Arc::clone(&socket);
    let send_handle = task::spawn(async move {
        let target_addr = "127.0.0.1:9090"; // ƒê·ªãa ch·ªâ client nh·∫≠n d·ªØ li·ªáu
        let data = b"Hello from Server!";
        
        loop {
            match socket_send.send_to(data, target_addr).await {
                Ok(len) => println!("üì§ Sent {} bytes to {}", len, target_addr),
                Err(e) => eprintln!("‚ùå Error sending data: {}", e),
            }
            sleep(Duration::from_secs(1)).await; // G·ª≠i m·ªói gi√¢y m·ªôt l·∫ßn
        }
    });

    handles.push(send_handle);

    // Ch·ªù t·∫•t c·∫£ worker ch·∫°y
    for handle in handles {
        handle.await?;
    }

    Ok(())
}
