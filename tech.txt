WriteProcessMemory + CreateRemoteThread

VirtualAlloc + memcpy + CreateThread

NtAllocateVirtualMemory + NtWriteVirtualMemory + NtCreateThreadEx

SetThreadContext + ResumeThread

QueueUserAPC (Asynchronous Procedure Call)

Suspend + Hijack thread context (GetThreadContext/SetThreadContext)

CreateFiber / SwitchToFiber (Fiber Local Storage Injection)

Process Hollowing (RunPE / Replace executable section)

Process Doppelgänging

Process Herpaderping

Ghostwriting (NTFS Transaction + Section Mapping)

Transacted Hollowing

AtomBombing (Queue APC via Atom table)

Early Bird APC Injection

PPID Spoofing (Parent PID spoofing + injection)

Heaven's Gate (32-bit process call 64-bit code)

Heaven's Gate Injection Chain (x86 → x64 → shellcode)

Section Mapping + NtMapViewOfSection (manual PE mapping)

Remote Thread Hijacking

Callback-based (like EnumWindows, RegisterWaitForSingleObject)

Window Procedure Injection (SetWindowLongPtr)

Shared Memory Section Injection (Section Objects)

1. Indirect Syscall Shellcode Execution (Syswhispers / Hell's Gate style)

2. Suspend → Inject → Alertable Wait + APC

3. DLL Hollowing

4. Shellcode Reflective Loader

5. GDI Callback Injection (e.g., SetWindowsHookEx)


6. Portable Executable Overwriting (In-memory PE overwrite)


7. Global Atom Table + RtlCreateUserThread


8. Shellcode via UserCallback (User32!xxxClientAllocWindowClassExtraBytes)


9. Image File Execution Options (IFEO) Hijacking + Shellcode


10. Callback-based Injection via NtSetInformationObject


11. PE Injection via Manual Mapping with Shellcode Launcher


12. Inject vào Process chưa khởi chạy (Image-level injection)

13. Thread Hijacking + Shellcode via Stack Pivoting


14. Callback Hijacking via COM / WMI (e.g., Event Consumer)

Shellcode Injection
├── I. Basic Techniques
│   ├── WriteProcessMemory + CreateRemoteThread
│   ├── SetWindowsHookEx
│   ├── CreateThread + VirtualAlloc/WriteMemory
│   ├── QueueUserAPC (với thread alertable)
│   ├── RemoteThread hijacking (Suspend + RtlCreateUserThread)
│   └── DLL Injection (classic)
│
├── II. Intermediate / Anti-Detection
│   ├── Process Hollowing
│   ├── Thread Execution Hijacking
│   ├── Reflective DLL Injection
│   ├── Manual Mapping (PE loader tự viết)
│   ├── AtomBombing (GlobalAtom + APC)
│   ├── Early Bird Injection (inject khi process chưa chạy)
│   └── Process Doppelgänging (NTFS transacted files)
│
├── III. Advanced / Evasion
│   ├── Heaven’s Gate (WOW64 to x64 switch)
│   ├── Hell’s Gate (Direct Syscall syscall stubs)
│   ├── Indirect Syscall (syswhispers/ngn)
│   ├── Shellcode Stack Pivot (ROP-style shellcode execution)
│   ├── IAT Hook Injection (alter imported API pointer)
│   ├── GDI Callback Injection (EnumWindows, CBT hook…)
│   ├── DLL Hollowing (overwrite DLL image)
│   └── Shared Memory Injection (FileMapping section)
│
├── IV. Obscure / Rare Techniques
│   ├── KernelCallbackTable Injection
│   ├── NtSetInformationObject Callback
│   ├── Shellcode trong Registry (IFEO / Run keys / AppInit_DLLs)
│   ├── Shellcode trong Alternate Data Streams (ADS)
│   ├── INI File Injection + Hijacked Loader
│   ├── Font Exploit Shellcode Trigger
│   ├── ETW Callback Hijack
│   └── EnumDesktops Callback Shellcode
│
├── V. Persistence + Execution
│   ├── COM Hijacking
│   ├── WMI Event Consumer (script or shellcode trigger)
│   ├── Scheduled Task trigger (w/ encoded shellcode)
│   ├── Services registry hijack
│   └── Startup folder with dropper + shellcode in memory
│
├── VI. Kernel-Level / APT
│   ├── MDL Injection (Memory Descriptor List abuse)
│   ├── EFI Injection (bootkit-level persistence)
│   ├── Hypervisor Injection (Bluepill / SMM level)
│   ├── Driver-based Manual Mapping
│   ├── VTL0 Injection (Virtual Trust Level - kernel bypass)
│   ├── DTrace / WPP Debug Callback Injection
│   └── Secure Boot Bypass + Signed Shellcode Load


Shellcode Injection
├── I. Basic Techniques
│   ├── WriteProcessMemory + CreateRemoteThread
│   ├── SetWindowsHookEx
│   ├── CreateThread + VirtualAlloc/WriteMemory
│   ├── QueueUserAPC (với thread alertable)
│   ├── RemoteThread hijacking (Suspend + RtlCreateUserThread)
│   └── DLL Injection (classic)
│
├── II. Intermediate / Anti-Detection
│   ├── Process Hollowing
│   ├── Thread Execution Hijacking
│   ├── Reflective DLL Injection
│   ├── Manual Mapping (PE loader tự viết)
│   ├── AtomBombing (GlobalAtom + APC)
│   ├── Early Bird Injection (inject khi process chưa chạy)
│   └── Process Doppelgänging (NTFS transacted files)
│
├── III. Advanced / Evasion
│   ├── Heaven’s Gate (WOW64 to x64 switch)
│   ├── Hell’s Gate (Direct Syscall syscall stubs)
│   ├── Indirect Syscall (syswhispers/ngn)
│   ├── Shellcode Stack Pivot (ROP-style shellcode execution)
│   ├── IAT Hook Injection (alter imported API pointer)
│   ├── GDI Callback Injection (EnumWindows, CBT hook…)
│   ├── DLL Hollowing (overwrite DLL image)
│   └── Shared Memory Injection (FileMapping section)
│
├── IV. Obscure / Rare Techniques
│   ├── KernelCallbackTable Injection
│   ├── NtSetInformationObject Callback
│   ├── Shellcode trong Registry (IFEO / Run keys / AppInit_DLLs)
│   ├── Shellcode trong Alternate Data Streams (ADS)
│   ├── INI File Injection + Hijacked Loader
│   ├── Font Exploit Shellcode Trigger
│   ├── ETW Callback Hijack
│   └── EnumDesktops Callback Shellcode
│
├── V. Persistence + Execution
│   ├── COM Hijacking
│   ├── WMI Event Consumer (script or shellcode trigger)
│   ├── Scheduled Task trigger (w/ encoded shellcode)
│   ├── Services registry hijack
│   └── Startup folder with dropper + shellcode in memory
│
├── VI. Kernel-Level / APT
│   ├── MDL Injection (Memory Descriptor List abuse)
│   ├── EFI Injection (bootkit-level persistence)
│   ├── Hypervisor Injection (Bluepill / SMM level)
│   ├── Driver-based Manual Mapping
│   ├── VTL0 Injection (Virtual Trust Level - kernel bypass)
│   ├── DTrace / WPP Debug Callback Injection
│   └── Secure Boot Bypass + Signed Shellcode Load
│
└── VII. Supplemental / Elite Techniques
    ├── Phantom DLL Hollowing (inject vào vùng bị mapped bởi DLL bị delete)
    ├── Inverted Hollowing (self hollowing từ process của chính mình)
    ├── IFEO Debugger Chain Shellcode Trigger (debugger = shellcode)
    ├── Malicious Handle Table Injection (handle table -> callback shellcode)
    ├── Threadless Execution (NtContinue + Context spoof)
    ├── RDTSC Timer Triggered Shellcode (vòng lặp dùng timestamp để jump)
    ├── LOLBin Shellcode Loader (msbuild / regsvr32 / installutil…)
    ├── Function Trampoline Hijack (hook call/jump → shellcode)
    ├── WOW64 APC Injection (APC vào 64-bit từ 32-bit)
    └── XFG-safe ROP-based Execution (cơ chế chống exploit Windows mới)
